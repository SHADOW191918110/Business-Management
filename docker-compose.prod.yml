services:
  # Production MongoDB with replica set
  mongodb:
    image: mongo:7.0
    container_name: pos-app-mongodb-prod
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ADMIN_PASSWORD}
      MONGO_INITDB_DATABASE: pos_app
    volumes:
      - mongodb_prod_data:/data/db
      - ./mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./mongodb.conf:/etc/mongod.conf.orig
    networks:
      - pos-prod-network
    command: ["--config", "/etc/mongod.conf.orig"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pos-app-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs
    networks:
      - pos-prod-network
    depends_on:
      - pos-api

  # Production API
  pos-api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: pos-app-api-prod
    restart: always
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:${MONGODB_ADMIN_PASSWORD}@mongodb:27017/pos_app?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - pos-prod-network

networks:
  pos-prod-network:
    driver: bridge
    name: pos-app-prod-network

volumes:
  mongodb_prod_data:
    name: pos-app-mongodb-prod-data
